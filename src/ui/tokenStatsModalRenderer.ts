
// src/ui/tokenStatsModalRenderer.ts
import * as state from '../state';
import { escapeHTML } from '../utils';
import { renderApp } from '../viewManager';
import type { TokenUsageStats } from '../types'; 
import { TOKEN_STATS_MODAL_COLORS, DEFAULT_MAX_CONTEXT_TOKENS } from '../types';

function handleExportPromptJson() {
    if (!state.tokenStatsForModal || !state.tokenStatsForModal.promptPayload) {
        alert("No prompt payload available to export.");
        return;
    }
    const payload = state.tokenStatsForModal.promptPayload;
    const jsonData = JSON.stringify(payload, null, 2);
    const blob = new Blob([jsonData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    const timestamp = new Date(state.tokenStatsForModal.timestamp).toISOString().replace(/[:.]/g, '-');
    a.download = `gemini_prompt_payload_${timestamp}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}


function renderTokenUsageBar(stats: TokenUsageStats): string {
    if (stats.totalInputTokensFromPreciseSum === 0) {
        return '<p>No input tokens from precise sum to display in bar.</p>';
    }
    const isGemma = stats.modelUsed.startsWith('gemma-');

    const components: { key: keyof typeof TOKEN_STATS_MODAL_COLORS, label: string, value: number }[] = [
        { key: 'preciseSystemInstructionBlockTokens', label: isGemma ? 'Full System Prompt (Prepended)' : 'Base System Prompt', value: stats.preciseSystemInstructionBlockTokens },
    ];

    if (!isGemma) {
        components.push({ key: 'preciseScenarioInstructionsTokens', label: 'Scenario Instructions', value: stats.preciseScenarioInstructionsTokens });
    }
    
    components.push(
        { key: 'precisePlotEssentialsTokens', label: 'Plot Essentials', value: stats.precisePlotEssentialsTokens },
        { key: 'preciseAuthorsNotesTokens', label: 'Author\'s Notes', value: stats.preciseAuthorsNotesTokens },
        { key: 'preciseAdventureHistoryTokens', label: 'Previous Adventure Turns', value: stats.preciseAdventureHistoryTokens },
        { key: 'preciseCardsTokens', label: 'Cards Context', value: stats.preciseCardsTokens }, // Will be 0 for now
        { key: 'preciseCurrentUserMessageTokens', label: 'Current Player Input', value: stats.preciseCurrentUserMessageTokens }
    );


    let barHtml = '<div class="token-usage-bar" style="display: flex; width: 100%; height: 25px; background-color: var(--surface-color); border-radius: var(--border-radius); overflow: hidden; margin-bottom: 0.5rem;">';
    let legendHtml = '<ul style="list-style: none; padding-left: 0; font-size: 0.85em; columns: 2; column-gap: 1rem;">';

    for (const component of components) {
        if (component.value > 0) {
            const percentage = (component.value / stats.totalInputTokensFromPreciseSum) * 100;
            const color = TOKEN_STATS_MODAL_COLORS[component.key as keyof typeof TOKEN_STATS_MODAL_COLORS] || '#ccc'; 
            barHtml += `<div style="width: ${percentage.toFixed(2)}%; background-color: ${color};" title="${component.label}: ${component.value} tokens (${percentage.toFixed(1)}%)"></div>`;
            legendHtml += `<li style="margin-bottom: 0.25rem;"><span style="display: inline-block; width: 12px; height: 12px; background-color: ${color}; margin-right: 5px; vertical-align: middle; border: 1px solid var(--border-color);"></span>${component.label}: ${component.value} (${percentage.toFixed(1)}%)</li>`;
        }
    }
    barHtml += '</div>';
    legendHtml += '</ul>';

    return barHtml + legendHtml;
}


export function renderTokenStatsModal() {
    const modalContainer = document.getElementById('token-stats-modal-container');
    if (!modalContainer) return;

    if (!state.isTokenStatsModalVisible) {
        modalContainer.innerHTML = '';
        return;
    }

    const stats = state.tokenStatsForModal;
    let contentHtml: string;

    if (!stats) {
        contentHtml = `
            <h2 id="token-stats-modal-heading">Token Usage Statistics</h2>
            <p>No token usage statistics are available for the selected turn or the AI response it prompted.</p>
            <p><em>This can happen if the turn was an error message generated by the application, or if it's a very old turn from before stats were tracked with turns. It might also occur if there was an issue fetching the precise token counts.</em></p>
        `;
    } else {
        const na = "<em style='color: var(--text-secondary); font-style: normal;'>N/A</em>";
        const modelMaxContext = state.modelInputTokenLimits[stats.modelUsed] || DEFAULT_MAX_CONTEXT_TOKENS;
        const promptTokenPercentageOfMax = stats.apiReportedPromptTokens ? (stats.apiReportedPromptTokens / modelMaxContext) * 100 : 0;

        let discrepancyNote = '';
        if (stats.apiReportedPromptTokens !== undefined && stats.totalInputTokensFromPreciseSum !== stats.apiReportedPromptTokens) {
            const diff = stats.apiReportedPromptTokens - stats.totalInputTokensFromPreciseSum;
            discrepancyNote = `<p style="font-size: 0.8em; color: #aaa;"><em>Note: The sum of individually counted components (${stats.totalInputTokensFromPreciseSum}) differs from the API-reported total for the combined prompt (${stats.apiReportedPromptTokens}) by ${diff} tokens. Small differences can occur due to how components are combined or tokenized by the API in a single vs. multiple calls.</em></p>`;
        }

        contentHtml = `
            <h2 id="token-stats-modal-heading">Token Usage Statistics</h2>
            <p style="font-size: 0.9em; color: var(--text-secondary); margin-bottom: 1rem;">
                Model: ${escapeHTML(stats.modelUsed)} | Timestamp: ${new Date(stats.timestamp).toLocaleString()}
            </p>

            <div style="margin-bottom: 1.5rem;">
                <strong>API Reported Totals (from <code>generateContent</code> call):</strong>
                <ul style="list-style: none; padding-left: 0;">
                    <li>Input (Full Prompt) Tokens: ${stats.apiReportedPromptTokens ?? na} ${stats.apiReportedPromptTokens ? `(~${promptTokenPercentageOfMax.toFixed(1)}% of max ${modelMaxContext} tokens for this model)` : `(Max context for model: ${modelMaxContext} tokens)`}</li>
                    <li>Output (Generated) Tokens: ${stats.apiReportedOutputTokens ?? na}</li>
                    <li>Thinking Tokens (if applicable): ${stats.apiReportedThinkingTokens ?? na}</li>
                </ul>
            </div>

            <div style="margin-bottom: 1.5rem;">
                <strong>Precise Input Breakdown (Sum of components: ${stats.totalInputTokensFromPreciseSum} tokens):</strong>
                <p style="font-size: 0.8em; color: var(--text-secondary); margin-bottom: 0.5rem;">(Breakdown based on precise <code>countTokens</code> API calls for each component. Percentages refer to contribution to the sum of these precise component counts.)</p>
                ${renderTokenUsageBar(stats)}
                ${discrepancyNote}
            </div>
            ${stats.promptPayload ? `<button type="button" id="export-prompt-json-btn" class="secondary" style="margin-top: 0.5rem;">Export Prompt JSON</button>` : ''}
        `;
    }

    modalContainer.innerHTML = `
        <div class="settings-modal-overlay" id="token-stats-modal-overlay" role="dialog" aria-modal="true" aria-labelledby="token-stats-modal-heading">
            <div class="settings-modal" style="max-width: 700px;"> <!-- Increased max-width for better display -->
                ${contentHtml}
                <div class="settings-modal-actions" style="margin-top: 1.5rem;">
                    <button type="button" id="token-stats-modal-close-btn" class="secondary">Close</button>
                </div>
            </div>
        </div>
    `;

    const closeButton = document.getElementById('token-stats-modal-close-btn');
    closeButton?.addEventListener('click', () => {
        state.setIsTokenStatsModalVisible(false);
        state.setTokenStatsForModal(null);
        renderApp();
    });
    
    const exportButton = document.getElementById('export-prompt-json-btn');
    exportButton?.addEventListener('click', handleExportPromptJson);

    const overlay = document.getElementById('token-stats-modal-overlay');
    overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) {
            state.setIsTokenStatsModalVisible(false);
            state.setTokenStatsForModal(null);
            renderApp();
        }
    });
    
    setTimeout(() => closeButton?.focus(), 0);
}
